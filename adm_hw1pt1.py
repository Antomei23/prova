# -*- coding: utf-8 -*-
"""ADM_HW1pt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w78sPitbLh-LNpbLTuh5X8r_618BeH2z

# Homework 1, question 1

### punto 1: INTRODUCTION
"""

#say "Hello, World!" with Python
Smy_sentence = "Hello, World!"
print(my_sentence)

#Python If-Else
import math
import os
import random
import re
import sys

if __name__ == '__main__':
    n = int(input().strip())
    if n%2 == 0:
        if (n>= 2 and n<= 5) or (n>20 and n<= 100):
            print('Not Weird')
        else:
            print("Weird")
    else:
        print("Weird")

#Arithmetic Operators
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    s = a+b
    d = a-b
    p = a*b
    print(s)
    print(d)
    print(p)

#Python: Division
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    print(a//b)
    print(a/b)

#Write a funcion
def is_leap(year):

    if year % 4 == 0:
        leap = True
        if year % 100==0:
            leap=False
            if year % 400 ==0:
                leap = True
    else:
        leap = False
    return leap
year = int(input())
print(is_leap(year))

#Loops
if __name__ == '__main__':
    n = int(input())
    for i in range(0,n):
        print(i**2)

#Print Funcion
if __name__ == '__main__':
    n = int(input())
    i=1
    st=""
    while i <= n:
        iS = str(i)
        st += iS
        i+=1
    print(st)

"""### punto 2: DATA TYPES"""

#List Comprehensions
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    l=[0,0,0]
    d=[]
    l_of_per=[l]
    for i in range(x+1):
        for j in range(y+1):
            for k in range(z+1):
                l[0]=i
                l[1]=j
                l[2]=k
                l=list(l)
                l_of_per.append(l)

S
    l_of_per[:] = [el for ind, el in enumerate(l_of_per) if ind == l_of_per.index(el)]

    for li in l_of_per:
        if sum(li) != n:
            d.append(li)

    print(d)

#Find the Runner-Up Score!
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    k1=[]
    k=list(arr)
    for el in k:
        if el < max(k):
            k1.append(el)
    k1.sort()
    print(k1[len(k1)-1])

#finding the percentage
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()

    a = student_marks[query_name]
    avg =(sum(a)/len(a))
    avg2="{:.2f}".format(avg)
    print(avg2)

#Nested Lists
if __name__ == '__main__':
    l=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        l.append([name,score])

    scores=[]
    for el in l:
        scores.append(el[1])
    scores.sort()
    minimo1=scores[0]
    minimo2=scores[1]

    scores_nuova=[]
    for i in scores:
        if i in scores_nuova:
            continue
        scores_nuova.append(i)

    m = scores_nuova[1]

    nomi=[]
    for k in l:

        if k[1]==m :
            nomi.append(k[0])

    nomi=sorted(nomi)
    for nome in nomi:
        print(nome)

#tuples
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())

    t=tuple(integer_list)
    print(hash(t))

#lists
if __name__ == '__main__':
    N = int(input())
    l=[]
    for i in range(N):
        i=input()
        a=i.split()
        if a[0]=='insert':
            l.insert(int(a[1]),int(a[2]))

        elif a[0]=='print':
            print(l)
        elif a[0]=='remove':
            l.remove(int(a[1]))
        elif a[0] == 'append':
            l.append(int(a[1]))
        elif a[0]=='sort':
            l.sort()
        elif a[0]=='pop':
            l.pop()
        elif a[0]=='reverse':
            l.reverse()

"""### punto 3: STRINGS"""

# sWAP cASE
def swap_case(s):
    st=''
    for i in range(len(s)):
        if s[i].islower() == True:
            st+=(s[i].upper())

        else:
            st+=(s[i].lower())
    return st
if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)

# String Split and Join
def split_and_join(line):
    line=line.split(" ")
    line="-".join(line)
    return line

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

# What's Your Name?
def print_full_name(first, last):
    a = 'Hello {0} {1}! You just delved into python.'.format(first, last)
    return print(a)

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)

# mutations
def mutate_string(string, position, character):
    s = list(string)
    s[position]=character
    s = ''.join(s)
    return s

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)

# Find a string
def count_substring(string, sub_string):
    x=0
    for i in range(len(string)):
        if string[i:len(sub_string)+i] == sub_string:
            x+=1
    return x

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()

    count = count_substring(string, sub_string)
    print(count)

# text allignment
thickness = int(input()) #This must be an odd number
c = 'H'
#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))
#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))
#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

# text wrap
import textwrap

def wrap(string, max_width):
    s = textwrap.wrap(string, max_width)
    k=''
    for el in s:
        k += el+"\n"
    return k

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)

# string formatting (DA RIVEDERE)
def print_formatted(number):
    for i in range(1,number+1):
        dec = i
        ott = oct(i).strip('0o')
        H = hex(i).upper().strip('0X')
        bi = bin(i).lstrip('0b')

        lastBI = bin(number+1).lstrip('0b')
        spa = len(lastBI)-len(bin(1).lstrip('0b'))

        if len(bi)-len(bin(1).lstrip('0b')) < 1:
            print('{0} {1} {2} {3} {4} {5} {6}'.format(dec,''*spa,ott, ''*spa,H, ''*(len(bi)-len(bin(1).lstrip('0b'))), bi))
        else:
            print('{0} {1} {2} {3} {4} {5}'.format(dec,''*spa ,ott, ''*spa,H, bi))

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)

# string validators
if __name__ == '__main__':
    s = input()
    print(any(a.isalnum() for a in s))
    print(any(b.isalpha() for b in s))
    print(any(c.isdigit() for c in s))
    print(any(d.islower() for d in s))
    print(any(e.isupper() for e in s))

# the minion game
def minion_game(string):
    vowels=['a','e','i','o','u','A','E','I','O','U']
    kevin=0
    stuart=0

    for i in range(len(string)):
        if string[i] in vowels:
            kevin+=(len(string)-i)
        else:
            stuart+=(len(string)-i)
    if kevin > stuart:
        print('Kevin {0}'.format(kevin))
    elif stuart > kevin:
        print('Stuart {0}'.format(stuart))
    else:
        print('Draw')

if __name__ == '__main__':
    s = input()
    minion_game(s)

# capitalize!
def solve(s):
    l=s.split(' ')
    res= ''
    for el in l:
        if el.isdigit()==False:
            el1=el.capitalize()
            res+=(el1+' ')
        else:
            res += el +' '
    return res.strip()

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    s = input()
    result = solve(s)
    fptr.write(result + '\n')
    fptr.close()

"""### punto 4: SETS"""

# introduction to sets
def average(array):
    a = list(set(array))
    avg= sum(a)/len(a)
    return avg

if __name__ == '__main__':
    n = int(input())
    arr = list(map(int, input().split()))
    result = average(arr)
    print(result)

# set.add()
N=int(input())
l=[]
for i in range(N):
    i=input()
    l.append(i)
s=set(l)
print(len(s))

# Set .discard(), .remove() & .pop()
n = int(input())
s = set(map(int, input().split()))
N=int(input())

for i in range(N):
    i = input()
    a=i.split()
    if a[0]=='pop' and len(s)!=0:
        s.pop()
    elif a[0]=='remove' and (int(a[1]) in s):
        s.remove(int(a[1]))
    elif a[0]=='discard':
        s.discard(int(a[1]))
print(sum(s))

# symmetric difference
if __name__ == "__main__":
    M = int(input().strip())
    setM = set(map(int, input().strip().split(' ')))
    N = int(input().strip())
    setN = set(map(int, input().strip().split(' ')))
    dMN = list(setM.difference(setN))
    dNM = list(setN.difference(setM))
    for el in sorted(dMN+dNM):
        print(el)

# Set .union() Operation
n=int(input())
eng = set(input().strip().split(' '))
b = int(input())
fra = set(input().strip().split(' '))
u = eng.union(fra)
print(len(u))

# Set .symmetric_difference() Operation
n=int(input())
eng = set(input().strip().split(' '))
b = int(input())
fra = set(input().strip().split(' '))
u = eng.symmetric_difference(fra)
print(len(u))

# Set .intersection() Operation
n=int(input())
eng = set(input().strip().split(' '))
b = int(input())
fra = set(input().strip().split(' '))
u = eng.intersection(fra)
print(len(u))

# Set .difference() Operation
n=int(input())
eng = set(input().strip().split(' '))
b = int(input())
fra = set(input().strip().split(' '))
u = eng.difference(fra)
print(len(u))

# Set Mutations
A = int(input())
setA = set(input().strip().split())
N = int(input()) # number of other sets
l=[]
for i in range(0, N*2):
    i = input().strip().split()
    l.append(i)

for k in range(0,len(l),2):
    if l[k][0] == 'intersection_update':
        setA.intersection_update(set(l[k+1]))
    elif l[k][0] == 'update':
        setA.update(set(l[k+1]))
    elif l[k][0] == 'difference_update':
        setA.difference_update(set(l[k+1]))
    elif l[k][0] == 'symmetric_difference_update':
        setA.symmetric_difference_update(set(l[k+1]))
j = map(int,list(setA))
print(sum(j))

"""### punto 5: Collections"""

# collections.Counter()
from collections import Counter

X = int(input())
l = input().split()
N = int(input())
cont = Counter(l)
res=0
for i in range(0,N):
    i = input().split()
    if cont[i[0]] >0 :
        res+=int(i[1])
        cont[i[0]]-=1
print(res)

# DefaultDict Tutorial
from collections import defaultdict

d = defaultdict(list)
n, m = input().split()
for i in range(int(n)):
    i=input()
    d['A'].append(i)
for k in range(int(m)):
    k=input()
    d['B'].append(k)

for el_b in d['B']:
    l=[]
    for ind in range(int(n)):
        if el_b == d['A'][ind]:
            l.append(ind+1)
        elif el_b not in d['A']:
            l=[-1]
            break
    print(*l)

# Collections.namedtuple()
from collections import namedtuple

N = int(input())
headers = input()
student = namedtuple('Student',headers)
somma=0
for i in range(N):
    i = student(*input().split())
    somma += int(i.MARKS)
print(float(somma/N))

# Collections.OrderedDict()
from collections import OrderedDict

N= int(input())
d = OrderedDict()
parole=[]
numeri=''
for i in range(N):
    i = input().split()
    parole = [x for x in i if x.isalpha()]
    numero= [x for x in i if x.isdigit()]
    if len(parole)== 2 and (parole[0]+' '+parole[1]) not in d.keys():
        d[parole[0]+' '+parole[1]]=int(numero[0])
    elif len(parole)== 1 and (parole[0]) not in d.keys():
        d[parole[0]]=int(numero[0])
    elif len(parole)== 2:
        d[parole[0]+' '+parole[1]]+=int(numero[0])
    elif len(parole)==1:
        d[parole[0]]+=int(numero[0])

for el in d.items():
    print(*el)

# Collections.deque()
from collections import deque

N=int(input())
d=deque()
for i in range(N):
    i=input().split()
    if i[0]=='append':
        d.append(i[1])
    elif i[0]=='pop':
        d.pop()
    elif i[0]=='popleft':
        d.popleft()
    elif i[0]=='appendleft':
        d.appendleft(i[1])
print(*d)

# Word Order
from collections import defaultdict

n = int(input())
d= defaultdict(list)
for i in range(n):
    i=input()
    if i not in d.keys():
        d[i]=1
    else:
        d[i]+=1
print(len(d.keys()))
print(*d.values())

# Company Logo
from collections import Counter

if __name__ == '__main__':
    s = sorted(input())
    cont = Counter(s)
    for letter, occurency in cont.most_common(3):
        print(letter, occurency)

"""### punto : Date and Time"""

# Calendar Module
import calendar
import datetime

i = input().split()
month = int(i[0])
day = int(i[1])
year = int(i[2])
date = datetime.date(year,month,day)
print(calendar.day_name[date.weekday()].upper())

# Time Delta (had to get help with an online solution)

import math
import os
import random
import re
import sys

# Complete the time_delta function below.
from datetime import *
def time_delta(t1, t2):
    formato = '%a %d %b %Y %H:%M:%S %z'
    t1 = datetime.strptime(t1, formato)
    t2 = datetime.strptime(t2, formato)
    return str(int(abs((t1-t2).total_seconds())))

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input())

    for t_itr in range(t):
        t1 = input()

        t2 = input()

        delta = time_delta(t1, t2)

        fptr.write(delta + '\n')

    fptr.close()

"""### punto 7: Exceptions"""

# Exceptions
T = int(input())
for i in range(T):
    i = input().split()
    a = i[0]
    b = i[1]
    try:
        print(int(a)//int(b))
    except Exception as e:
        print("Error Code: {0}".format(e))

"""### punto 8: Built-ins: zipped, python sort sort, ginorts"""

# Zipped!
N, X = input().split()
l=[]
for i in range(int(X)):
    i = map(float,input().split())
    l.append(i)

zipped = zip(*l)
for el in zipped:
    print(sum(el)/int(X))

# Athlet Sort
if __name__ == '__main__':
    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    k = int(input())

    sorted_arr = sorted(arr, key = lambda x : x[k])
    for row in sorted_arr:
        print(*row)

"""### punto 9: Python Functionals"""

# Map and Lambda Function
cube = lambda x: x**3 # complete the lambda function

def fibonacci(n):
    l = [0,1]
    for i in range(2,n):
        l.append(l[i-2] + l[i-1])
    return(l[0:n])

if __name__ == '__main__':
    n = int(input())
    print(list(map(cube, fibonacci(n))))

"""### punto 10: Regex and Parsing challenges
had to consult online solutions
"""

# Detect Floating Point Number
from re import *

pattern = compile('^[-+]?[0-9]*\.[0-9]+$')
N = int(input())

for el in range(N):
    el = input()
    mat = pattern.match(el)
    print(bool(mat))

# Re.split()
regex_pattern = r"[.,]+"	# Do not delete 'r'.

import re
print("\n".join(re.split(regex_pattern, input())))

# Group(), Groups() & Groupdict()
import re

S=input()
m = re.search(r'([a-zA-Z0-9])\1', S.strip())
if m:
    print(m.group(1))
else:
    print(-1)

# Re.findall() & Re.finditer()
import re
S = input()
vowels= 'aeiouAEIOU'
consonants= 'qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM'
pattern = '(?<=['+ consonants + '])([' + vowels+ ']{2,})(?=['+consonants+'])'
m = re.findall(pattern, S, flags=re.I)
print('\n'.join(m or ['-1']))

# Re.start() & Re.end()
import re
S=input()
k = input()
pattern = re.compile(k)
m = pattern.search(S)
if not m:
    print('(-1, -1)')
while m:
    print('({0}, {1})'.format(m.start(), m.end() - 1))
    m = pattern.search(S, m.start() + 1)

"""### punto 11: XML
had to consult online solutions
"""

# XML 1 - Find the score
import sys
import xml.etree.ElementTree as etree

def get_attr_number(node):
    count = 0
    for el in node:
        count = count + get_attr_number(el)
    return count + len(node.attrib)


if __name__ == '__main__':
    sys.stdin.readline()
    xml = sys.stdin.read()
    tree = etree.ElementTree(etree.fromstring(xml))
    root = tree.getroot()
    print(get_attr_number(root))

# XML 2 - Find the Maximum Depth
import xml.etree.ElementTree as etree

maxdepth = 0
def depth(elem, level):
    global maxdepth
    if (level == maxdepth):
        maxdepth += 1
    for child in elem:
        depth(child, level + 1)

if __name__ == '__main__':
    n = int(input())
    xml = ""
    for i in range(n):
        xml =  xml + input() + "\n"
    tree = etree.ElementTree(etree.fromstring(xml))
    depth(tree.getroot(), -1)
    print(maxdepth)

"""### punto 12: Closures and Decorations"""

# Standardize Mobile Number Using Decorators
def wrapper(f):
    def fun(l):
        f(['+91 ' + o[-10:-5] + ' ' + o[-5:] for o in l])
    return fun

@wrapper
def sort_phone(l):
    print(*sorted(l), sep='\n')

if __name__ == '__main__':
    l = [input() for _ in range(int(input()))]
    sort_phone(l)

# Decorators 2 - Name Directory
import operator

def person_lister(f):
    def inner(people):

        return [f(p) for p in sorted(people, key= lambda x: (int(x[2])))]
    return inner

@person_lister
def name_format(person):
    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]

if __name__ == '__main__':
    people = [input().split() for i in range(int(input()))]
    print(*name_format(people), sep='\n')

"""### punto 13: Numpy"""

# Array
import numpy

def arrays(arr):
    return(numpy.array(arr[::-1],float))
arr = input().strip().split(' ')
result = arrays(arr)
print(result)

# Shape and reshape
import numpy as np

i = np.array(list(input().split()),int)
print(i.reshape(3,3))

# Transpose and Flatten
import numpy as np

N, M = map(int,input().split())
rows=[]
for n in range(N):
    n= list(map(int,input().split()))
    rows.append(n)

rows = np.array(rows)
print(np.transpose(rows))
print(rows.flatten())

# Concatenate
import numpy as np

N,M,P = map(int,input().split())
res = []
for i in range(N+M):
    i = list(map(int,input().split()))
    res.append(i)

res= np.array(res)
print(res)

# Zeros and Ones
import numpy as np

i = list(map(int, input().split()))
res_0 = np.zeros(i,dtype=int)
res_1 = np.ones(i,dtype=int)
print(res_0)
print(res_1)

# Eye and Identity
import numpy as np
np.set_printoptions(legacy='1.13')
i,j = map(int, input().split())
print(np.eye(i,j))

# Array Mathematical
import numpy as np
n,m = map(int,input().split())

a=np.zeros((n,m),int)
b=np.zeros((n,m),int)
for i in range(n):
    a[i]=np.array(input().split(),int)
for i in range(n):
    b[i]=np.array(input().split(),int)
print(np.add(a,b))
print(np.subtract(a,b))
print(np.multiply(a,b))
print(np.floor_divide(a,b))
print(np.mod(a,b))
print(np.power(a,b))

# Floor, Ceil and Rint
import numpy as np

A = np.array(list(map(float,input().split())))
np.set_printoptions(legacy='1.13')
print(np.floor(A))
print(np.ceil(A))
print(np.rint(A))

# Sum and Prod
import numpy as np

a= input().split()
N= int(a[0])
arr = np.array([np.array(list(map(int, input().split()))) for i in range(N)])
print(np.prod(np.sum(arr, axis=0)))

# Min and Max
import numpy as np

a = input().split()
N = int(a[0])
arr = np.array([(list(map(int,input().split()))) for x in range(N)])
print(np.max(np.min(arr, axis=1)))

# Mean, Var, Std
import numpy as np
N = int(input().split()[0])
arr = np.array([list(map(float,input().split())) for x in range(N)])
print(np.mean(arr,axis=1))
print(np.var(arr, axis=0))
print(np.std(arr).round(11))

# Dot and Cross
import numpy as np

N = int(input())
A = np.array([list(map(int, input().split())) for x in range(N)])
B = np.array([list(map(int, input().split())) for i in range(N,N*2)])
print(np.dot(A,B))

# Inner and Outer
import numpy as np

A = np.array(list(map(int,input().split())))
B = np.array(list(map(int,input().split())))
print(np.inner(A,B))
print(np.outer(A,B))

# Polynomials
import numpy as np

P = np.array(list(map(float,input().split())))
x = int(input())
print(np.polyval(P,x))

# Linear Algebra
import numpy as np
from numpy import linalg

N = int(input())
A = np.array([list(map(float, input().split())) for x in range(N)])
print(np.linalg.det(A).round(2))

"""# Homework 1, question 2

### Birthday Cake Candles
"""

import math
import os
import random
import re
import sys


def birthdayCakeCandles(candles):
    m = max(candles)
    c = 0
    for el in candles:
        if el == m:
            c+=1
    return c

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())

    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')

    fptr.close()

"""### Kangaroo"""

# Number Line Jumps
import math
import os
import random
import re
import sys

def kangaroo(x1, v1, x2, v2):
    x = 10000
    i=0
    res = 'NO'
    if x1==x2:
        res = 'YES'
    while i < x:
        x1+=v1
        x2+=v2
        if x1==x2:
            res = 'YES'
        i+=1
    return res


if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])

    v1 = int(first_multiple_input[1])

    x2 = int(first_multiple_input[2])

    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')

    fptr.close()

"""### Viral Advertising"""

# Viral Advertising
import math
import os
import random
import re
import sys

def viralAdvertising(n):

    d={1:[5, int(5/2), int(5/2)]}
    for day in range(2,n+1):
        shared = (d[day-1][1])*3
        liked = int(shared/2)
        cumulative = d[day-1][2]+liked
        if day not in d.keys():
            d[day]=[shared, liked, cumulative]
    return d[n][2]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    result = viralAdvertising(n)

    fptr.write(str(result) + '\n')

    fptr.close()

"""### Recursive Digit Sum

"""

# Recursive Digit Sum

import math
import os
import random
import re
import sys

def superDigit(n, k):
    p = str(k*sum(int(x) for x in n))
    while len(p)>1:
        p=str(sum((int(i) for i in p)))
    return p

if __name__ == '__main__':
  pfptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]

    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    fptr.write(str(result) + '\n')

    fptr.close()

"""### Insertion Sort - Part 1"""

# Insertion Sort - Part 1

def insertionSort1(n, arr):
    last= n-1
    a = arr[last]
    if n == 1:
        print(*arr)
        return

    def insertionSort1(n, arr):
    last=n-1
    a = arr[n-1]

    for i in range(last-1, -1, -1):
        if a < arr[i]:
            arr[i+1]=arr[i]
            print(*arr)
        else:
            arr[i+1] = a
            print(*arr)
            break
    if arr[0] > a:
        arr[0] = a
        print(*arr)


if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)